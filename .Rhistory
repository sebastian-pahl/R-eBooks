e;;h;b;k;d;
r;o;t;k;k;
c;y;h;v;n;b;k;h;d;a;
p;n;m;b;n;n;
i;n;o;o;
x;n;
k;c;b;n;
d;q;
r;q;y;d;t;r;d;
a;q;c;
e;q;b;
t;y;
h;y;d;n;b;v;h;n;i;
d;w;t;y;u;k;
e;q;b;
s;n;b;k;n;v;n;b;h;y;m;
"a"="y"; "b"="r"; "c"="u"; "d"="t"; "e"="f"; "f"="y"; "h"="i"; "i"="w"; "j"="x"; "k"="s"; "m"="g";
"n"="e"; "l"="z"; "o"="l"; "p"="d"; "q"="o"; "r"="c"; "s"="p"; "t"="a"; "u"="k"; "v"="r"; "w"="h";
"x"="b"; "y"="n"; "z"="m"
i;n;o;o;
p;q;y;n;
a;q;c;
r;b;t;r;u;n;p;
h;d;
d;w;t;d;
i;t;k;y;d;
d;q;q;
w;t;b;p;
i;t;k;
h;d;
s;o;n;t;k;n;
k;n;y;p;
a;q;c;b;
k;q;o;c;d;h;q;y;k;
d;q;
d;w;n;
s;c;l;l;o;n;k;
d;q;
r;b;t;r;u;n;p;
t;d;
n;h;m;w;d;a;d;i;n;y;d;a;
p;q;d;
r;q;
p;q;d;
l;t;
h;e;
a;q;c;v;n;
r;w;q;k;n;y;
k;q;z;n;
q;e;
d;w;n;
w;t;b;p;n;b;
r;w;t;o;o;n;y;m;n;k;
t;y;p;
z;t;p;n;
k;q;z;n;
d;w;q;c;m;w;d;e;c;o;
t;d;d;n;z;s;d;k;
t;d;
d;w;n;
t;y;k;i;n;b;k;
i;n;o;o;
m;n;d;
x;t;r;u;
d;q;
a;q;c;
t;y;p;
t;k;u;
a;q;c;
e;q;b;
a;q;c;b;
r;v;
h;e;
a;q;c;
w;t;v;n;
t;y;
n;j;r;n;o;o;n;d;
z;t;d;b;h;r;
t;y;p;
t;
e;;h;b;k;d;
r;o;t;k;k;
c;y;h;v;n;b;k;h;d;a;
p;n;m;b;n;n;
i;n;o;o;
x;n;
k;c;b;n;
d;q;
r;q;y;d;t;r;d;
a;q;c;
e;q;b;
t;y;
h;y;d;n;b;v;h;n;i;
d;w;t;y;u;k;
e;q;b;
s;n;b;k;n;v;n;b;h;y;m;
"a"="y"; "b"="r"; "c"="u"; "d"="t"; "e"="f"; "f"="y"; "h"="i"; "i"="w"; "j"="x"; "k"="s"; "m"="g";
"n"="e"; "l"="z"; "o"="l"; "p"="d"; "q"="o"; "r"="c"; "s"="p"; "t"="a"; "u"="k"; "v"="r"; "w"="h";
"x"="b"; "y"="n"; "z"="m"
i;n;o;o;
p;q;y;n;
a;q;c;
r;b;t;r;u;n;p;
h;d;
d;w;t;d;
i;t;k;y;d;
d;q;q;
w;t;b;p;
i;t;k;
h;d;
s;o;n;t;k;n;
k;n;y;p;
a;q;c;b;
k;q;o;c;d;h;q;y;k;
d;q;
d;w;n;
s;c;l;l;o;n;k;
d;q;
r;b;t;r;u;n;p;
t;d;
n;h;m;w;d;a;d;i;n;y;d;a;
p;q;d;
r;q;
p;q;d;
l;t;
h;e;
a;q;c;v;n;
r;w;q;k;n;y;
k;q;z;n;
q;e;
d;w;n;
w;t;b;p;n;b;
r;w;t;o;o;n;y;m;n;k;
t;y;p;
z;t;p;n;
k;q;z;n;
d;w;q;c;m;w;d;e;c;o;
t;d;d;n;z;s;d;k;
t;d;
d;w;n;
t;y;k;i;n;b;k;
i;n;o;o;
m;n;d;
x;t;r;u;
d;q;
a;q;c;
t;y;p;
t;k;u;
a;q;c;
e;q;b;
a;q;c;b;
r;v;
h;e;
a;q;c;
w;t;v;n;
t;y;
n;j;r;n;o;o;n;d;
z;t;d;b;h;r;
t;y;p;
t;
e;h;b;k;d;
r;o;t;k;k;
c;y;h;v;n;b;k;h;d;a;
p;n;m;b;n;n;
i;n;o;o;
x;n;
k;c;b;n;
d;q;
r;q;y;d;t;r;d;
a;q;c;
e;q;b;
t;y;
h;y;d;n;b;v;h;n;i;
d;w;t;y;u;k;
e;q;b;
s;n;b;k;n;v;n;b;h;y;m;
"a"="y"; "b"="r"; "c"="u"; "d"="t"; "e"="f"; "f"="y"; "h"="i"; "i"="w"; "j"="x"; "k"="s"; "m"="g";
"n"="e"; "l"="z"; "o"="l"; "p"="d"; "q"="o"; "r"="c"; "s"="p"; "t"="a"; "u"="k"; "v"="v"; "w"="h";
"x"="b"; "y"="n"; "z"="m"
i;n;o;o;
p;q;y;n;
a;q;c;
r;b;t;r;u;n;p;
h;d;
d;w;t;d;
i;t;k;y;d;
d;q;q;
w;t;b;p;
i;t;k;
h;d;
s;o;n;t;k;n;
k;n;y;p;
a;q;c;b;
k;q;o;c;d;h;q;y;k;
d;q;
d;w;n;
s;c;l;l;o;n;k;
d;q;
r;b;t;r;u;n;p;
t;d;
n;h;m;w;d;a;d;i;n;y;d;a;
p;q;d;
r;q;
p;q;d;
l;t;
h;e;
a;q;c;v;n;
r;w;q;k;n;y;
k;q;z;n;
q;e;
d;w;n;
w;t;b;p;n;b;
r;w;t;o;o;n;y;m;n;k;
t;y;p;
z;t;p;n;
k;q;z;n;
d;w;q;c;m;w;d;e;c;o;
t;d;d;n;z;s;d;k;
t;d;
d;w;n;
t;y;k;i;n;b;k;
i;n;o;o;
m;n;d;
x;t;r;u;
d;q;
a;q;c;
t;y;p;
t;k;u;
a;q;c;
e;q;b;
a;q;c;b;
r;v;
h;e;
a;q;c;
w;t;v;n;
t;y;
n;j;r;n;o;o;n;d;
z;t;d;b;h;r;
t;y;p;
t;
e;h;b;k;d;
r;o;t;k;k;
c;y;h;v;n;b;k;h;d;a;
p;n;m;b;n;n;
i;n;o;o;
x;n;
k;c;b;n;
d;q;
r;q;y;d;t;r;d;
a;q;c;
e;q;b;
t;y;
h;y;d;n;b;v;h;n;i;
d;w;t;y;u;k;
e;q;b;
s;n;b;k;n;v;n;b;h;y;m;
test= function(x) {
use=mod(x,19)==17 & mod(x,17)==13 & mod(x,13)==11 & mod(x,11)==7 & mod(x,7)=3)
x[use]
}
test(100000:999999)
test= function(x) {
use=(mod(x,19)==17 & mod(x,17)==13 & mod(x,13)==11 & mod(x,11)==7 & mod(x,7)=3)
x[use]
}
test(100000:999999)
test= function(x) {
use=(mod(x,19)==17 & mod(x,17)==13 & mod(x,13)==11 & mod(x,11)==7 & mod(x,7)==3)
x[use]
}
test(100000:999999)
test2= function(x) {
use=(x%%19)==17 & (x%%17)==13 & (x%%13)==11 & (x%%11)==7 & (x%%7)==3)
x[use]
}
test2= function(x) {
use=(x%%19)==17 & (x%%17)==13 & (x%%13)==11 & (x%%11)==7 & (x%%7)==3
x[use]
}
test2(100000:999999)
test2= function(x) {
use=(x%%19)==17 & (x%%17)==13 & (x%%13)==11 & (x%%11)==7
x[use]
}
test2(100000:999999)
getwd()
dir()
myfunction(x) <- {
y <- rnorm(100)
mean(y)
}
myfuction()
myfunction()
ls()        #list objects in workspace
myfunction <- function(x) {
y <- rnorm(100)
mean(y)
}
myfunction()
rm(myfunction)
function1 <- function(x) {
y <- rnorm(100)
mean(y)
}
function2 <- function(x) {
x + rnorm(length(x))
}
function2(10)
search()
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- (-0.5) * length(data) * log(2*pi*sigma^2)
b <- (-0.5) * sum((data-mu)^2) / sigma^2
-(a+b)
}
}
set.seed(1)
normals <- rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(enironment(nLL))
ls(environment(nLL))
plot(nLL)
plot(normals)
?plot
plot(normals)
plot(c(0,1,2,3,4), normals)
plot(normals, type="h")
?sum
quantile(normals)
plot(quantile(normals))
optim(c(mu = 0, sigma = 1), nLL)
optim(c(mu = 0, sigma = 1), nLL)$par
optim(c(mu = 1, sigma = 2), nLL)$par
nLL_mu <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL_mu)
optimize(nLL_mu, c(-1,3))
optimize(nLL_mu, c(-1,3))$minimum
nLL_sigma <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL_sigma, c(-1,3))$minimum
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
x <- seq(0.5, 1.5, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type = "l")
nLL_mu <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL_mu, c(-1,3))$minimum
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type = "l")
nLL_sigma <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL_sigma, c(-1,3))$minimum
x <- seq(0.5, 1.5, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type = "l")
nLL_mu <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL_mu, c(-1,3))$minimum
x <- seq(0.5, 1.5, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type = "l")
nLL_sigma <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL_sigma, c(-1,3))$minimum
x <- seq(1.7,1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type = "l")
nLL_mu <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL_mu, c(-1,3))$minimum
x <- seq(0.5, 1.5, len=100)
y <- sapply(x, nLL_mu)
plot(x, exp(-(y-min(y))), type = "l")
nLL_sigma <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL_sigma, c(-1,3))$minimum
x <- seq(1.7,1.9, len=100)
y <- sapply(x, nLL_sigma)
plot(x, exp(-(y-min(y))), type = "l")
y
Sys.time()
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
names(unclass(p))
p$sec
uncalss(p)
unclass(p)
x <- Sys.time()
unclass(x)
?strptime()
install.packages("swirl")
install.packages("swirl")
library("swirl")
ls()
swirl()
setwd("/Users/sebastianpahl/Git/Strava-project/")
library("tidyverse") #for str
library("zoo") #for na.locf
library("geosphere") #need for distCosine
zone_names <- c("Zone 1", "Zone 2", "Zone 3", "Zone 4", "Zone 5")
power_zones <- c(0, 150, 200, 300, 400)
hr_zones <- c(0, 110, 135, 150, 165)
zones <- data_frame(zone_names, power_zones, hr_zones)
power_zone_checker <- function(x, z = zones) {
if(x < z$power_zones[2]) {
power = z$zone_names[1]
}
else if(x < z$power_zones[3]) {
power = z$zone_names[2]
}
else if(x < z$power_zones[4]) {
power = z$zone_names[3]
}
else if(x < z$power_zones[5]) {
power = z$zone_names[4]
}
else (power = z$zone_names[5])
}
hr_zone_checker <- function(x, z = zones) {
if(x < z$hr_zones[2]) {
hr = z$zone_names[1]
}
else if(x < z$hr_zones[3]) {
hr = z$zone_names[2]
}
else if(x < z$hr_zones[4]) {
hr = z$zone_names[3]
}
else if(x < z$hr_zones[5]) {
hr = z$zone_names[4]
}
else (hr = z$zone_names[5])
}
strava_table_creator <- function(data.gpx) {
data_table <- read.csv(data.gpx, strip.white = TRUE, skip=1,col.names = c("column1"))
data_character <- as.character(data_table[,1])
find_time <- grep("<time>", data_character, value=TRUE)
activity_date <- strptime(find_time, "<time>%Y-%m-%dT%H:%M:%SZ</time>")
time_passed <- difftime(activity_date[-1], activity_date[1])
hours <- as.numeric(time_passed)/60/60
find_elevation <- grep("<ele>", data_character, value=TRUE)
elevation <- as.numeric(gsub("</?ele>","",find_elevation))
find_coordinates <- grep("<trkpt lat", data_character, value=TRUE)
latitude <- as.numeric(substr(find_coordinates,12,21))
longitude <- as.numeric(substr(find_coordinates,27,35))
#extensions
data_string <- toString(data_table)
extensions <- c(str_split(data_string, "/extensions", simplify=TRUE))
power_function <- function(x) {
extract_power <- str_extract(x, "<power>.*</power>")
power <- str_extract(extract_power, "\\d+")
power
}
power <- head(na.locf(as.numeric(lapply(extensions, power_function))),-1)
hr_function <- function(x) {
extract_hr <- str_extract(x, "<gpxtpx:hr>.*</gpxtpx:hr>")
hr <- str_extract(extract_hr, "\\d+")
hr
}
hr <- head(na.locf(as.numeric(lapply(extensions, hr_function))),-1)
cadence_function <- function(x) {
extract_cadence <- str_extract(x, "<gpxtpx:cad>.*</gpxtpx:cad>")
cadence <- str_extract(extract_cadence, "\\d+")
cadence
}
cadence <- head(na.locf(as.numeric(lapply(extensions, cadence_function))),-1)
temperature_function <- function(x) {
extract_temperature <- str_extract(x, "<gpxtpx:atemp>.*</gpxtpx:atemp>")
temperature <- str_extract(extract_temperature, "\\d+")
temperature
}
temperature <- head(na.locf(as.numeric(lapply(extensions, temperature_function))),-1)
power_zone <- sapply(power, power_zone_checker)
hr_zone <- sapply(hr, hr_zone_checker)
data.frame(hours, elevation, longitude, latitude, power, hr, cadence,
temperature, power_zone, hr_zone)
}
#create data frame from gpx file (load your own gpx file here)
strava_data <- strava_table_creator("Morning_Ride_Kandel.gpx")
meters <- distCosine(strava_data[3:4])
distance_function <- function(m) {
distance <- as.numeric()
distance[1] = 0
distance[2] = m[1]
for(i in 1:(length(m)-1)) {
distance[i+2] = distance[i+1] + m[i+1]
}
distance/1000
}
distance_km <- distance_function(meters)
strava_data <- data.frame(strava_data, distance_km)
write_csv(strava_data, "strava_data.csv")
avg_finder <- function(x) {
vector <- as.numeric()
for (i in x:length(strava_data$power)) {
vector[i] = mean(strava_data$power[(i-x+1):i])
}
vector
}
max_finder <- function(y) {
vector <- as.numeric()
for (i in 1:y) {
vector[i] = max(avg_finder(i), na.rm=TRUE)
}
vector
}
power <- max_finder(5*60)
seconds <- c(1:(5*60))
power_curve <- data_frame(seconds, power)
write_csv(power_curve, "power_curve.csv")
